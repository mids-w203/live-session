## and an actually estimated model that is:
## y ~ \tilde{\beta}_{0} + \tilde{\beta}_{1}z_{i} + \tilde{epsilon}_{i}
omitted_variables_bias <- function(
n=100, beta0=0, beta1=1, beta2=2, cov_z_x=0,
long_or_short=c('long', 'short')) {
require(dplyr)
require(MASS)
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
data_matrix <- mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
d <- data.frame(
id = 1:n,
z  = data_matrix[ , 1],
x  = data_matrix[ , 2]) %>%
mutate(
y = beta0 + (beta1 * z) + (beta2 * x) + rnorm(n=n)
)
if(length(long_or_short) == 2) {
stop('Pick `long_or_short` to be either "long" or "short!"')
} else if(long_or_short == 'long') {
model <- lm(y ~ z + x, data = d)
} else if(long_or_short == 'short') {
model <- lm(y ~ z, data = d)
}
return(model)
}
library(dplyr)
library(ggplot2)
library(MASS)
library(progress)
omitted_variables_bias <- function(
n=100, beta0=0, beta1=1, beta2=2, cov_z_x=0,
long_or_short=c('long', 'short')) {
require(dplyr)
require(MASS)
variance_covariance_matrix <- matrix(
data = c(2, cov_z_x, cov_z_x, 2),
nrow = 2, ncol = 2, byrow = TRUE
)
data_matrix <- mvrnorm(n=n, mu=c(0, 0), Sigma=variance_covariance_matrix)
d <- data.frame(
id = 1:n,
z  = data_matrix[ , 1],
x  = data_matrix[ , 2]) %>%
mutate(
y = beta0 + (beta1 * z) + (beta2 * x) + rnorm(n=n)
)
if(length(long_or_short) == 2) {
stop('Pick `long_or_short` to be either "long" or "short!"')
} else if(long_or_short == 'long') {
model <- lm(y ~ z + x, data = d)
} else if(long_or_short == 'short') {
model <- lm(y ~ z, data = d)
}
return(model)
}
View(omitted_variables_bias)
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
omitted_variables_bias(n=100, long_or_short = 'long')
simulation <- function(long_or_short='long', cov_z_x=0, beta2=2) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short, beta2=beta2))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30)
}
## 1. Estimate the long model, with no covariance between z and x
omitted_variables_bias(cov_z_x = 0, long_or_short = 'short')
## 1. Estimate the long model, with no covariance between z and x
omitted_variables_bias(cov_z_x = 0, long_or_short = 'long')
simulation(long_or_short = 'long', cov_z_x = 0)
simulation(long_or_short = 'short', cov_z_x = 0)
simulation(long_or_short = 'long', cov_z_x = 0.1)
simulation(long_or_short = 'short', cov_z_x = 0.1)
simulation <- function(long_or_short='long', cov_z_x=0, beta2=2) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short, beta2=beta2))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30) +
coord_cartesian(xlim = c(0, 2))
}
simulation(long_or_short = 'long', cov_z_x = 0.1)
## 4. Estimate the short model, with 0.1 covariance between z and x
simulation(long_or_short = 'short', cov_z_x = 0.1)
simulation <- function(long_or_short='long', cov_z_x=0, beta2=2) {
estimated_results <- rep(NA, 1000)
pb <- progress_bar$new(total = 1000)
for(i in 1:1000) {
estimated_results[i] <- coef(omitted_variables_bias(cov_z_x = cov_z_x, long_or_short = long_or_short, beta2=beta2))['z']
pb$tick()
}
ggplot() +
aes(x = estimated_results) +
geom_histogram(bins = 30)
}
simulation(long_or_short = 'long', cov_z_x = 0.5)
simulation(long_or_short = 'short', cov_z_x = 0.1, beta2 = 10)
simulation(long_or_short = 'short', cov_z_x = 0.5, beta2 = 10)
d <- data.table::fread('~/Downloads/Batch_4616774_batch_results.csv')
d
View(d)
View(d)
d <- data.table::fread('~/Downloads/cps_00001.csv')
d
d[ , table(VOREG)]
d[ , table(VOREG, useNA = TRUE)]
d[ , table(VOREG, useNA)]
?table
d[ , table(VOREG, useNA = 'always')]
LETTERS[1:10]
d <- data.table(
group = sample(LETTERS[1:10], size = 100, replace = TRUE),
treat = sample(c('control', 'treatment'), size = 100, replace = TRUE)
)
d[ , y := 1 + 2 * I(treat == 'treatment') + 3 * I(group == 'A') + rnorm(n=100)]
d <- data.table(
group = sample(LETTERS[1:10], size = 100, replace = TRUE),
treat = sample(c('control', 'treatment'), size = 100, replace = TRUE)
)
d <- data.table::data.table(
group = sample(LETTERS[1:10], size = 100, replace = TRUE),
treat = sample(c('control', 'treatment'), size = 100, replace = TRUE)
)
d[ , y := 1 + 2 * I(treat == 'treatment') + 3 * I(group == 'A') + rnorm(n=100)]
not_saturated_model <- d[ , lm(y ~ factor(treat) + factor(group) + factor(treat)*factor(group))]
summary(not_saturated)
summary(not_saturated_model)
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text'
)
saturated_model <- d[ , lm(y ~ -1 + factor(treat) + factor(group) + factor(treat)*factor(group))]
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text'
)
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text',
omit.stat = c('rse', 'F')
)
stargazer::stargazer(
not_saturated_model, saturated_model,
type = 'text',
omit.stat = c('ser', 'F')
)
table <- data.table(
subject = 1:7,
y_0 = c(10, 12, 15, 11, 10, 17, 16),
y_1 = c(12, 12, 18, 14, 15, 18, 16),
tau = c(2, 0, 3, 3, 5, 1, 0)
)
library(data.table)
table <- data.table(
subject = 1:7,
y_0 = c(10, 12, 15, 11, 10, 17, 16),
y_1 = c(12, 12, 18, 14, 15, 18, 16),
tau = c(2, 0, 3, 3, 5, 1, 0)
)
first  <- table[ , mean(y_1)] - table[ , mean(y_0)]
second <- table[ , mean(y_1 - y_0)]
first == second
library(testthat)
library(testthat)
test_that(
'test that the first and second methods of proving produce the same values',
expect_equal(first, second)
)
test_that(
'tests that the first method plus one, does not return the same value as the second method',
expect_failure(first +1 == second)
)
test_that(
'tests that the first method plus one, does not return the same value as the second method',
expect_false(first + 1 == second)
)
library(testthat)
test_that(
'test that the first and second methods of proving produce the same values',
expect_equal(first, second)
)
test_that(
'tests that the first method plus one, does not return the same value as the second method',
expect_false(first + 1 == second)
)
## we're first going to create the variable `tau`, because it will be useful to have later
d[ , tau := (y_1 - y_0)]
d <- data.table(
child = 1:10,
y_0 = c(1.2, 0.1, 0.5, 0.8, 1.5, 2.0, 1.3, 0.7, 1.1, 1.4),
y_1 = c(1.2, 0.7, 0.5, 0.8, 0.6, 2.0, 1.3, 0.7, 1.1, 1.4)
)
## we're first going to create the variable `tau`, because it will be useful to have later
d[ , tau := (y_1 - y_0)]
## and then, we will assign this object `tau` into a new object that is outside the data.table
tau_true <- d[ , tau]
tau_true
mse <- function(vector_of_treatment_effects, truth) {
vector_of_treatment_effects - truth %>%
(.)^2 %>%
mean(.)
}
mse(1:10, 5)
mse <- function(vector_of_treatment_effects, truth) {
vector_of_treatment_effects - truth %>%
.^2 %>%
mean(.)
}
mse(1:10, 5)
mse <- function(vector_of_treatment_effects, truth) {
vector_of_treatment_effects - truth %>%
.^2 %>%
mean
}
mse(1:10, 5)
mse <- function(vector_of_treatment_effects, truth) {
mean((vector_of_treatment_effects - truth)^2)\
mse <- function(vector_of_treatment_effects, truth) {
mean((vector_of_treatment_effects - truth)^2)
}
mse(1:10, 5)
d[ , ]
?.SD
for(i in 1:10) {
print(d[i , y_1] - d[-i, mean(y_0)])
}
one_kid_estimate <- NA
for(i in 1:10) {
one_kid[i] <- print(d[i , y_1] - d[-i, mean(y_0)])
}
mse <- function(vector_of_treatment_effects, truth) {
mean((vector_of_treatment_effects - truth)^2)
}
## one kid in treatment, this is *easier*
one_kid_estimate <- NA
for(i in 1:10) {
one_kid_estimate[i] <- print(d[i , y_1] - d[-i, mean(y_0)])
}
mse <- function(vector_of_treatment_effects, truth) {
mean((vector_of_treatment_effects - truth)^2)
}
## one kid in treatment, this is *easier*
one_kid_estimate <- NA
for(i in 1:10) {
one_kid_estimate[i] <- print(d[i , y_1] - d[-i, mean(y_0)])
}
test_that(
'notice that the mean of the one_kid_estimate is equal to the true ate',
expect_equal(one_kid_estimate, true_ate)
)
true_ate <- d[, mean(tau)]
true_ate
mse <- function(vector_of_treatment_effects, truth) {
mean((vector_of_treatment_effects - truth)^2)
}
## one kid in treatment, this is *easier*
one_kid_estimate <- NA
for(i in 1:10) {
one_kid_estimate[i] <- print(d[i , y_1] - d[-i, mean(y_0)])
}
test_that(
'notice that the mean of the one_kid_estimate is equal to the true ate',
expect_equal(one_kid_estimate, true_ate)
)
mean(one_kid_estimate)
true_ate
mse <- function(vector_of_treatment_effects, truth) {
mean((vector_of_treatment_effects - truth)^2)
}
## one kid in treatment, this is *easier*
one_kid_estimate <- NA
for(i in 1:10) {
one_kid_estimate[i] <- print(d[i , y_1] - d[-i, mean(y_0)])
}
test_that(
'notice that the mean of the one_kid_estimate is equal to the true ate',
expect_equal(one_kid_estimate, true_ate)
)
mse <- function(vector_of_treatment_effects, truth) {
mean((vector_of_treatment_effects - truth)^2)
}
## one kid in treatment, this is *easier*
one_kid_estimate <- NA
for(i in 1:10) {
one_kid_estimate[i] <- print(d[i , y_1] - d[-i, mean(y_0)])
}
test_that(
'notice that the mean of the one_kid_estimate is equal to the true ate',
expect_equal(mean(one_kid_estimate), true_ate)
)
true_ate
combn(1:10, 5)
dim(combn(1:10, 5))
choose(1:10, 5)
choose(10, 5)
combn(1:10, 5)
assignments <- combn(1:10, 5)
assignments <- combn(1:10, 5)
assignments[ , 1]
class(assignments[ , 1])
d[assignments[,1]]
d[!assignments[,1]]
## one kid in treatment, this is *easier*
one_kid_estimate <- NA
for(i in 1:10) {
one_kid_estimate[i] <- print(d[i , y_1] - d[!i, mean(y_0)])
}
test_that(
'notice that the mean of the one_kid_estimate is equal to the true ate',
expect_equal(mean(one_kid_estimate), true_ate)
)
assignments <- combn(1:10, 5)
five_kids_estimate <- NA
for(i in 1:252) {
five_kids_estimate[i] <- d[assignments[, i], mean(y_1)] - d[!assignments[, i], mean(y_0)]
}
five_kids_estimte)
five_kids_estimte
five_kids_estimate
test_that(
'notice that the mean of the one_kid_estimate is equal to the true ate',
expect_equal(mean(five_kids_estimate), true_ate)
)
test_that(
'notice that the mean of the five_kids_estimate is equal to the true ate',
expect_equal(mean(five_kids_estimate), true_ate)
)
mse(one_kid_estimate)
mse(one_kid_estimate, true_ate)
- The MSE for the one kids  estimate is: **`r mse(one_kid_estimate, true_ate)`**.
- The MSE for the five kids estimate is: **`r mse(five_kids_estimate, true_ate)`**
- The MSE for the one kids  estimate is: **`r mse(one_kid_estimate, true_ate)`**.
- The MSE for the five kids estimate is: **`r mse(five_kids_estimate, true_ate)`**
- The MSE for the one kids  estimate is: **`r mse(one_kid_estimate, true_ate)`**.
- The MSE for the five kids estimate is: **`r mse(five_kids_estimate, true_ate)`**
r mse(five_kids_estimate, true_ate)
mse(five_kids_estimate, true_ate)
mse(one_kid_estimate, true_ate)
getwd()
getwd()
setwd('~/MIDS/w241/mids-w241-live-session/')
bookdown::render_book(clean = TRUE, output = 'bookdown::gitbook')
make_data <- function(
sample_size                       = 100,
potential_outcome_to_control_mean = 10,
potential_outcome_to_control_sd   = 2,
treatment_effect                  = 1,
sd_treatment                      = 2) {
## this is a function to make data to simulate the power of a test
}
test_data <- function(data, treatment_indicator, outcome) {
}
p_values <- replicate(n = 1000)
p_values <- replicate(n = 1000)
bookdown::render_book(clean = TRUE, output = 'bookdown::gitbook')
population_education <- sample(
x    = 0: 28,
size = 1000,
replace = TRUE,
prob = ((28:1)^2 / sum((28:1)^2))
)
population_education <- sample(
x    = 0: 28,
size = 1000,
replace = TRUE,
prob = ((29:1)^2 / sum((29:1)^2))
)
hist(population_education)
population_education <- sample(
x    = 0: 28,
size = 1000,
replace = TRUE,
prob = ((29:1)^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 28)
population_education <- sample(
x    = 0: 28,
size = 1000,
replace = TRUE,
prob = ((29:1)^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 29)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((29:1)^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 29)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((29:1)^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 29)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:14, 14:1))^2 / sum((29:1)^2))
)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:14, 15:1))^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 29)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 10:1))^2 / sum((29:1)^2))
)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 11:1))^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 29)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 11:1))^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 28)
set.seed(1)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 11:1))^2 / sum((29:1)^2))
)
ggplot() +
geom_histogram(aes(x=population_education), bins = 28)
set.seed(1)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 11:1))^2 / sum((29:1)^2))
)
ggplot() +
aes(x=population_education) +
geom_histogram(bins = 28, fill = '#003262')
set.seed(1)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 11:1))^2 / sum((29:1)^2))
)
ggplot() +
aes(x=population_education) +
geom_histogram(bins = 28, fill = '#003262') +
labs(title = 'Years of Education')
set.seed(1)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 11:1))^2 / sum((29:1)^2))
)
ggplot() +
aes(x=population_education) +
geom_histogram(bins = 28, fill = '#003262') +
labs(
title = 'Years of Education',
x     = 'Years',
y     = 'Number of Instances')
set.seed(1)
population_education <- sample(
x    = 0: 28,
size = 2000,
replace = TRUE,
prob = ((c(1:10, rep(10, 8), 11:1))^2 / sum((29:1)^2))
)
ggplot() +
aes(x=population_education) +
geom_histogram(bins = 28, fill = '#003262') +
labs(
title = 'Years of Education',
x     = 'Years',
y     = 'Pr(Instances)')
bookdown::render_book()
setwd('~/MIDS/w203/live-session/')
bookdown::render_book()
